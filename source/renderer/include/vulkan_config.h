
const int MAX_FRAMES_IN_FLIGHT = 2;

const std::vector<const char*> validationLayers = {
    "VK_LAYER_KHRONOS_validation",
};

const std::vector<const char*> instanceExtensions = {
    VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME,
    VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
    // "VK_KHR_device_group_creation",
    // "VK_KHR_display",
    // "VK_KHR_external_fence_capabilities",
    // "VK_KHR_external_memory_capabilities",
    // "VK_KHR_external_semaphore_capabilities",
    // "VK_KHR_get_display_properties2",
    // "VK_KHR_get_physical_device_properties2",
    // "VK_KHR_get_surface_capabilities2",
    // "VK_KHR_surface",
    // "VK_KHR_surface_protected_capabilities",
    // "VK_KHR_wayland_surface",
    // "VK_KHR_xcb_surface",
    // "VK_KHR_xlib_surface",
    // "VK_EXT_acquire_drm_display",
    // "VK_EXT_acquire_xlib_display",
    // "VK_EXT_debug_report",
    // "VK_EXT_direct_mode_display",
    // "VK_EXT_display_surface_counter",
    // "VK_EXT_debug_utils",
    // "VK_KHR_portability_enumeration",
};

const std::vector<const char*> deviceExtensions = {
    VK_KHR_SWAPCHAIN_EXTENSION_NAME,
    VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME,
    VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME,
    // "VK_KHR_8bit_storage",
    // "VK_KHR_16bit_storage",
    // "VK_KHR_bind_memory2",
    // "VK_KHR_copy_commands2",
    // "VK_KHR_create_renderpass2",
    // "VK_KHR_dedicated_allocation",
    // "VK_KHR_deferred_host_operations",
    // "VK_KHR_depth_stencil_resolve",
    // "VK_KHR_descriptor_update_template",
    // "VK_KHR_device_group",
    // "VK_KHR_draw_indirect_count",
    // "VK_KHR_driver_properties",
    // "VK_KHR_dynamic_rendering",
    // "VK_KHR_external_fence",
    // "VK_KHR_external_fence_fd",
    // "VK_KHR_external_memory",
    // "VK_KHR_external_memory_fd",
    // "VK_KHR_external_semaphore",
    // "VK_KHR_external_semaphore_fd",
    // "VK_KHR_format_feature_flags2",
    // "VK_KHR_get_memory_requirements2",
    // "VK_KHR_image_format_list",
    // "VK_KHR_imageless_framebuffer",
    // "VK_KHR_incremental_present",
    // "VK_KHR_maintenance1",
    // "VK_KHR_maintenance2",
    // "VK_KHR_maintenance3",
    // "VK_KHR_maintenance4",
    // "VK_KHR_multiview",
    // "VK_KHR_pipeline_executable_properties",
    // "VK_KHR_push_descriptor",
    // "VK_KHR_relaxed_block_layout",
    // "VK_KHR_sampler_mirror_clamp_to_edge",
    // "VK_KHR_sampler_ycbcr_conversion",
    // "VK_KHR_separate_depth_stencil_layouts",
    // "VK_KHR_shader_atomic_int64",
    // "VK_KHR_shader_clock",
    // "VK_KHR_shader_draw_parameters",
    // "VK_KHR_shader_float16_int8",
    // "VK_KHR_shader_float_controls",
    // "VK_KHR_shader_integer_dot_product",
    // "VK_KHR_shader_non_semantic_info",
    // "VK_KHR_shader_subgroup_extended_types",
    // "VK_KHR_shader_subgroup_uniform_control_flow",
    // "VK_KHR_shader_terminate_invocation",
    // "VK_KHR_spirv_1_4",
    // "VK_KHR_storage_buffer_storage_class",
    // "VK_KHR_swapchain",
    // "VK_KHR_swapchain_mutable_format",
    // "VK_KHR_synchronization2",
    // "VK_KHR_timeline_semaphore",
    // "VK_KHR_uniform_buffer_standard_layout",
    // "VK_KHR_variable_pointers",
    // "VK_KHR_vulkan_memory_model",
    // "VK_KHR_workgroup_memory_explicit_layout",
    // "VK_KHR_zero_initialize_workgroup_memory",
    // "VK_EXT_4444_formats",
    // "VK_EXT_buffer_device_address",
    // "VK_EXT_calibrated_timestamps",
    // "VK_EXT_color_write_enable",
    // "VK_EXT_conditional_rendering",
    // "VK_EXT_conservative_rasterization",
    // "VK_EXT_custom_border_color",
    // "VK_EXT_depth_clip_enable",
    // "VK_EXT_descriptor_indexing",
    // "VK_EXT_display_control",
    // "VK_EXT_extended_dynamic_state",
    // "VK_EXT_extended_dynamic_state2",
    // "VK_EXT_external_memory_dma_buf",
    // "VK_EXT_external_memory_host",
    // "VK_EXT_fragment_shader_interlock",
    // "VK_EXT_global_priority",
    // "VK_EXT_global_priority_query",
    // "VK_EXT_host_query_reset",
    // "VK_EXT_image_drm_format_modifier",
    // "VK_EXT_image_robustness",
    // "VK_EXT_index_type_uint8",
    // "VK_EXT_inline_uniform_block",
    // "VK_EXT_line_rasterization",
    // "VK_EXT_memory_budget",
    // "VK_EXT_multi_draw",
    // "VK_EXT_pci_bus_info",
    // "VK_EXT_physical_device_drm",
    // "VK_EXT_pipeline_creation_cache_control",
    // "VK_EXT_pipeline_creation_feedback",
    // "VK_EXT_post_depth_coverage",
    // "VK_EXT_primitive_topology_list_restart",
    // "VK_EXT_private_data",
    // "VK_EXT_provoking_vertex",
    // "VK_EXT_queue_family_foreign",
    // "VK_EXT_robustness2",
    // "VK_EXT_sample_locations",
    // "VK_EXT_sampler_filter_minmax",
    // "VK_EXT_scalar_block_layout",
    // "VK_EXT_separate_stencil_usage",
    // "VK_EXT_shader_atomic_float",
    // "VK_EXT_shader_atomic_float2",
    // "VK_EXT_shader_demote_to_helper_invocation",
    // "VK_EXT_shader_stencil_export",
    // "VK_EXT_shader_subgroup_ballot",
    // "VK_EXT_shader_subgroup_vote",
    // "VK_EXT_shader_viewport_index_layer",
    // "VK_EXT_subgroup_size_control",
    // "VK_EXT_texel_buffer_alignment",
    // "VK_EXT_transform_feedback",
    // "VK_EXT_vertex_attribute_divisor",
    // "VK_EXT_ycbcr_image_arrays",
    // "VK_GOOGLE_decorate_string",
    // "VK_GOOGLE_hlsl_functionality1",
    // "VK_GOOGLE_user_type",
    // "VK_INTEL_shader_integer_functions2",
    // "VK_NV_compute_shader_derivatives",
    // "VK_VALVE_mutable_descriptor_type",
};

#ifdef NDEBUG
const bool enableValidationLayers = false;
#else
const bool enableValidationLayers = true;
#endif

VkResult CreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pDebugMessenger) {
    auto func = (PFN_vkCreateDebugUtilsMessengerEXT) vkGetInstanceProcAddr(instance, "vkCreateDebugUtilsMessengerEXT");
    if (func != nullptr) {
        return func(instance, pCreateInfo, pAllocator, pDebugMessenger);
    } else {
        return VK_ERROR_EXTENSION_NOT_PRESENT;
    }
}

void DestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT debugMessenger, const VkAllocationCallbacks* pAllocator) {
    auto func = (PFN_vkDestroyDebugUtilsMessengerEXT) vkGetInstanceProcAddr(instance, "vkDestroyDebugUtilsMessengerEXT");
    if (func != nullptr) {
        func(instance, debugMessenger, pAllocator);
    }
}
